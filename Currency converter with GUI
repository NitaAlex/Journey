# NOTE: In order for this to work on Windows you need to run pip install forex-python and pip install tk from cmd

import tkinter as tk # This library is used for creating graphical user interfaces (GUIs) in Python.
from forex_python.converter import CurrencyRates # This module is part of the forex-python library, which is used for fetching exchange rates.

def convert_currency():
    amount = float(entry_amount.get())
    from_currency = combo_from_currency.get().upper()
    to_currency = combo_to_currency.get().upper()

    c = CurrencyRates()
    exchange_rate = c.get_rate(from_currency, to_currency)
    converted_amount = round(amount * exchange_rate, 2)

    result_label.config(text=f"{amount} {from_currency} is equal to {converted_amount} {to_currency}")

# Creating the main window
root = tk.Tk() # Creates the main window for the GUI.
root.title("Currency Converter") # Sets the title of the window.

# Adding input widgets
label_amount = tk.Label(root, text="Enter the amount:")
label_amount.pack()

entry_amount = tk.Entry(root)
entry_amount.pack()

label_from_currency = tk.Label(root, text="Select source currency:")
label_from_currency.pack()

currencies = ["USD", "EUR", "GBP", "RON"]
combo_from_currency = tk.StringVar(value="USD")
combo_from_currency_menu = tk.OptionMenu(root, combo_from_currency, *currencies) # Creates dropdown menus for selecting currencies.
combo_from_currency_menu.pack() # Organizes the widgets in a vertical layout.

label_to_currency = tk.Label(root, text="Select target currency:")
label_to_currency.pack()

combo_to_currency = tk.StringVar(value="EUR")
combo_to_currency_menu = tk.OptionMenu(root, combo_to_currency, *currencies)
combo_to_currency_menu.pack()

# Adding a button to perform the conversion
convert_button = tk.Button(root, text="Convert", command=convert_currency) # Creates a button with the label "Convert" and associates it with the convert_currency function.
convert_button.pack()

# Displaying the result
result_label = tk.Label(root, text="") #  Displays the result of the currency conversion.
result_label.pack()

# Starting the main loop - Enters the main event loop, which waits for user actions and updates the GUI accordingly. The program stays in this loop until the user closes the window.
root.mainloop()
